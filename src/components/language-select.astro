---
import { DEFAULT_LOCALE, LANGUAGES } from "../i18n/consts";
import { useTranslations } from "../i18n/utils/use-translations";
import Select from "./select.astro";

const t = useTranslations(Astro.currentLocale);
---
<language-select>
  <Select
    icon="translate"
    label={t('languageSelect.accessibleLabel')}
    value={Astro.currentLocale ?? DEFAULT_LOCALE}
    width="6rem"
    options={Object.entries(LANGUAGES).map(([code, locale]) => ({
      value: code,
      selected: code === Astro.currentLocale,
      label: locale,
    }))
    }
  />
</language-select>

<script>
  import { unwrap } from "@imhonglu/toolkit";

  function updateLocaleInPathname(pathname: string, newLocale: string) {
    const pathSegments = pathname.split("/").slice(2).join("/");

    return `/${newLocale}/${pathSegments}`;
  }

  class LanguageSelect extends HTMLElement {
    private select = unwrap(this.querySelector("select"));

    connectedCallback() {
      this.select.addEventListener("change", this.handleSelectChange.bind(this));
      window.addEventListener("pageshow", this.handlePageShow.bind(this));
    }

    disconnectedCallback() {
      this.select.removeEventListener(
        "change",
        this.handleSelectChange.bind(this),
      );
      window.removeEventListener("pageshow", this.handlePageShow.bind(this));
    }

    private handleSelectChange(event: Event) {
      if (event.currentTarget instanceof HTMLSelectElement) {
        window.location.pathname = updateLocaleInPathname(
          window.location.pathname,
          event.currentTarget.value,
        );
      }
    }

    private handlePageShow(event: PageTransitionEvent) {
      if (!event.persisted) {
        return;
      }

      const markupSelectedIndex =
        this.select.querySelector<HTMLOptionElement>("option[selected]")?.index;

      if (markupSelectedIndex !== this.select.selectedIndex) {
        this.select.selectedIndex = markupSelectedIndex ?? 0;
      }
    }
  }

  customElements.define("language-select", LanguageSelect);
</script>
